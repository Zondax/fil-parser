package types_test

import (
	"math/big"
	"testing"
	"time"

	"github.com/filecoin-project/go-state-types/exitcode"
	"github.com/zondax/fil-parser/tools"
	"github.com/zondax/fil-parser/types"
)

func TestTransaction_Equal(t1 *testing.T) {
	tests := []struct {
		name string
		a    types.Transaction
		b    types.Transaction
		want bool
	}{
		{
			name: "equal txs",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: true,
		},
		{
			name: "Different BlockData",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    500,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "Different Id",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0001",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: true,
		},
		{
			name: "different ParendId",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "01",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: true,
		},
		{
			name: "different Level",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         1,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different TxTimestamp",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Now(),
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different txCid",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "newtxCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different txFrom",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x001",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different txTo",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x002",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different Amount",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(10000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different GasUsed",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       10,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different Status",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.SysErrOutOfGas),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.SysErrOutOfGas),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different TxType",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Propose",
				TxMetadata:    "{}",
			},
			want: false,
		},
		{
			name: "different metadata",
			a: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{}",
			},
			b: types.Transaction{
				TxBasicBlockData: types.TxBasicBlockData{
					BasicBlockData: types.BasicBlockData{
						Height:    1000,
						TipsetCid: "test",
					},
					BlockCid: "test",
				},
				Id:            "0000",
				ParentId:      "",
				Level:         0,
				TxTimestamp:   time.Time{},
				TxCid:         "txCid",
				TxFrom:        "0x000",
				TxTo:          "0x001",
				Amount:        big.NewInt(1000),
				GasUsed:       0,
				Status:        tools.GetExitCodeStatus(exitcode.Ok),
				InnerTxStatus: tools.GetExitCodeStatus(exitcode.Ok),
				TxType:        "Send",
				TxMetadata:    "{\"params\": {\"Sectors\":[10,12,34]}}",
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t1.Run(tt.name, func(t1 *testing.T) {
			if got := tt.a.Equal(tt.b); got != tt.want {
				t1.Errorf("Equal() = %v, want %v", got, tt.want)
			}
		})
	}
}
